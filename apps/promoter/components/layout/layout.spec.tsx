import { render, shallow } from '@testing-library/react';

import Layout from './layout';

// Generated by CodiumAI

describe('Layout', () => {
  // Tests that UIProvider component is rendered
  it('should render UIProvider component', () => {
    const wrapper = shallow(
      <Layout>
        <div>Test</div>
      </Layout>
    );
    expect(wrapper.find(UIProvider)).toHaveLength(1);
  });

  // Tests that Flex component is rendered with correct props
  it('should render Flex component with correct props', () => {
    const wrapper = shallow(
      <Layout>
        <div>Test</div>
      </Layout>
    );
    const flex = wrapper.find(Flex);
    expect(flex).toHaveLength(2);
    expect(flex.at(0).props()).toEqual({
      overflow: 'auto',
      height: '100vh',
      flexDirection: 'column',
      padding: '24px 16px 32px 16px',
      backgroundColor: 'var(--brand-black, #1C1C1C);',
    });
    expect(flex.at(1).props()).toEqual({ children: <div>Test</div> });
  });

  // Tests that Link component is rendered with correct href prop
  it('should render Link component with correct href prop', () => {
    const wrapper = shallow(
      <Layout>
        <div>Test</div>
      </Layout>
    );
    const link = wrapper.find(Link);
    expect(link).toHaveLength(1);
    expect(link.prop('href')).toEqual('/new-event');
  });

  // Tests that Image component is rendered with correct props
  it('should render Image component with correct props', () => {
    const wrapper = shallow(
      <Layout>
        <div>Test</div>
      </Layout>
    );
    const image = wrapper.find(Image);
    expect(image).toHaveLength(1);
    expect(image.prop('width')).toEqual(32);
    expect(image.prop('height')).toEqual(32);
    expect(image.prop('alt')).toEqual('Go back');
  });

  // Tests that Menu.svg image is rendered when pathname is not 'home'
  it('should render Menu.svg image when pathname is not home', () => {
    const wrapper = shallow(
      <Layout>
        <div>Test</div>
      </Layout>
    );
    wrapper.setProps({ children: <div />, pathname: 'not-home' });
    const image = wrapper.find(Image);
    expect(image.prop('src')).toEqual('/Menu.svg');
  });

  // Tests that Avatar.svg image is rendered when pathname is 'home'
  it('should render Avatar.svg image when pathname is home', () => {
    const wrapper = shallow(
      <Layout>
        <div>Test</div>
      </Layout>
    );
    wrapper.setProps({ children: <div />, pathname: 'home' });
    const image = wrapper.find(Image);
    expect(image.prop('src')).toEqual('/Avatar.svg');
  });
});
