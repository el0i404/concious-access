/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
  'mutation Register($email: String!, $password: String!, $organization: String!) {\n  register(email: $email, password: $password, organization: $organization) {\n    data {\n      id\n    }\n  }\n}\n\nmutation Login($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    data {\n      isVerified\n      email\n      role\n      token\n    }\n    message\n    status\n  }\n}\n\nmutation CreateEvent($event: [EventInput]!) {\n  createEvent(event: $event) {\n    data {\n      guide_lines {\n        seq_id\n        id\n        title\n        type\n      }\n    }\n  }\n}\n\nmutation ForgotPassword($email: String!) {\n  forgotPassword(email: $email) {\n    email\n    id\n    success\n  }\n}\n\nmutation ResendCode($email: String!) {\n  resendCode(email: $email) {\n    success\n  }\n}\n\nmutation VerifyCode($verifyCodeId: ID!, $code: String!) {\n  verifyCode(id: $verifyCodeId, code: $code) {\n    message\n    success\n  }\n}\n\nmutation ResetPassword($email: String!, $password: String!) {\n  resetPassword(email: $email, password: $password) {\n    message\n    success\n  }\n}\n\nquery GetEvents {\n  getEvents {\n    id\n    name\n    location\n    date\n    sharable_link\n    start_time\n    guide_lines {\n      seq_id\n      type\n      title\n      body\n      correct_answer\n      mcq_question_list {\n        value\n        label\n      }\n    }\n  }\n}\n\nmutation DeleteEvent($deleteEventId: ID!) {\n  deleteEvent(id: $deleteEventId) {\n    status\n    message\n  }\n}\n\nmutation scanQRCode($qrCodeNumber: String) {\n  scanQRCode(qr_code_number: $qrCodeNumber) {\n    qr_code_scanned_time\n    success\n    message\n  }\n}\n\nquery GetEventWithoutAnswers($getEventWithoutAnswersId: ID!) {\n  getEventWithoutAnswers(id: $getEventWithoutAnswersId) {\n    id\n    name\n    location\n    date\n    start_time\n    guide_lines {\n      id\n      seq_id\n      type\n      title\n      body\n      mcq_question_list {\n        value\n        label\n      }\n    }\n    sharable_link\n  }\n}\n\nmutation SubmitResult($eventId: ID!, $eventResult: [EventResultInput!]!) {\n  submitResult(event_id: $eventId, event_result: $eventResult) {\n    event_id\n    is_passed\n    is_qr_code_scanned\n    qr_code_number\n    createdAt\n  }\n}\n\nquery GetEvent($getEventId: ID!) {\n  getEvent(id: $getEventId) {\n    id\n    name\n    sharable_link\n    start_time\n    location\n    guide_lines {\n      body\n      correct_answer\n      id\n      mcq_question_list {\n        label\n        value\n      }\n      seq_id\n      title\n      type\n    }\n    date\n    user {\n      email\n      first_name\n      id\n      last_name\n      organization\n    }\n  }\n}\n\nmutation UpdateEvent($updateEventId: ID!, $event: EventUpdate!) {\n  updateEvent(id: $updateEventId, event: $event) {\n    message\n    status\n  }\n}':
    types.RegisterDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'mutation Register($email: String!, $password: String!, $organization: String!) {\n  register(email: $email, password: $password, organization: $organization) {\n    data {\n      id\n    }\n  }\n}\n\nmutation Login($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    data {\n      isVerified\n      email\n      role\n      token\n    }\n    message\n    status\n  }\n}\n\nmutation CreateEvent($event: [EventInput]!) {\n  createEvent(event: $event) {\n    data {\n      guide_lines {\n        seq_id\n        id\n        title\n        type\n      }\n    }\n  }\n}\n\nmutation ForgotPassword($email: String!) {\n  forgotPassword(email: $email) {\n    email\n    id\n    success\n  }\n}\n\nmutation ResendCode($email: String!) {\n  resendCode(email: $email) {\n    success\n  }\n}\n\nmutation VerifyCode($verifyCodeId: ID!, $code: String!) {\n  verifyCode(id: $verifyCodeId, code: $code) {\n    message\n    success\n  }\n}\n\nmutation ResetPassword($email: String!, $password: String!) {\n  resetPassword(email: $email, password: $password) {\n    message\n    success\n  }\n}\n\nquery GetEvents {\n  getEvents {\n    id\n    name\n    location\n    date\n    sharable_link\n    start_time\n    guide_lines {\n      seq_id\n      type\n      title\n      body\n      correct_answer\n      mcq_question_list {\n        value\n        label\n      }\n    }\n  }\n}\n\nmutation DeleteEvent($deleteEventId: ID!) {\n  deleteEvent(id: $deleteEventId) {\n    status\n    message\n  }\n}\n\nmutation scanQRCode($qrCodeNumber: String) {\n  scanQRCode(qr_code_number: $qrCodeNumber) {\n    qr_code_scanned_time\n    success\n    message\n  }\n}\n\nquery GetEventWithoutAnswers($getEventWithoutAnswersId: ID!) {\n  getEventWithoutAnswers(id: $getEventWithoutAnswersId) {\n    id\n    name\n    location\n    date\n    start_time\n    guide_lines {\n      id\n      seq_id\n      type\n      title\n      body\n      mcq_question_list {\n        value\n        label\n      }\n    }\n    sharable_link\n  }\n}\n\nmutation SubmitResult($eventId: ID!, $eventResult: [EventResultInput!]!) {\n  submitResult(event_id: $eventId, event_result: $eventResult) {\n    event_id\n    is_passed\n    is_qr_code_scanned\n    qr_code_number\n    createdAt\n  }\n}\n\nquery GetEvent($getEventId: ID!) {\n  getEvent(id: $getEventId) {\n    id\n    name\n    sharable_link\n    start_time\n    location\n    guide_lines {\n      body\n      correct_answer\n      id\n      mcq_question_list {\n        label\n        value\n      }\n      seq_id\n      title\n      type\n    }\n    date\n    user {\n      email\n      first_name\n      id\n      last_name\n      organization\n    }\n  }\n}\n\nmutation UpdateEvent($updateEventId: ID!, $event: EventUpdate!) {\n  updateEvent(id: $updateEventId, event: $event) {\n    message\n    status\n  }\n}'
): (typeof documents)['mutation Register($email: String!, $password: String!, $organization: String!) {\n  register(email: $email, password: $password, organization: $organization) {\n    data {\n      id\n    }\n  }\n}\n\nmutation Login($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    data {\n      isVerified\n      email\n      role\n      token\n    }\n    message\n    status\n  }\n}\n\nmutation CreateEvent($event: [EventInput]!) {\n  createEvent(event: $event) {\n    data {\n      guide_lines {\n        seq_id\n        id\n        title\n        type\n      }\n    }\n  }\n}\n\nmutation ForgotPassword($email: String!) {\n  forgotPassword(email: $email) {\n    email\n    id\n    success\n  }\n}\n\nmutation ResendCode($email: String!) {\n  resendCode(email: $email) {\n    success\n  }\n}\n\nmutation VerifyCode($verifyCodeId: ID!, $code: String!) {\n  verifyCode(id: $verifyCodeId, code: $code) {\n    message\n    success\n  }\n}\n\nmutation ResetPassword($email: String!, $password: String!) {\n  resetPassword(email: $email, password: $password) {\n    message\n    success\n  }\n}\n\nquery GetEvents {\n  getEvents {\n    id\n    name\n    location\n    date\n    sharable_link\n    start_time\n    guide_lines {\n      seq_id\n      type\n      title\n      body\n      correct_answer\n      mcq_question_list {\n        value\n        label\n      }\n    }\n  }\n}\n\nmutation DeleteEvent($deleteEventId: ID!) {\n  deleteEvent(id: $deleteEventId) {\n    status\n    message\n  }\n}\n\nmutation scanQRCode($qrCodeNumber: String) {\n  scanQRCode(qr_code_number: $qrCodeNumber) {\n    qr_code_scanned_time\n    success\n    message\n  }\n}\n\nquery GetEventWithoutAnswers($getEventWithoutAnswersId: ID!) {\n  getEventWithoutAnswers(id: $getEventWithoutAnswersId) {\n    id\n    name\n    location\n    date\n    start_time\n    guide_lines {\n      id\n      seq_id\n      type\n      title\n      body\n      mcq_question_list {\n        value\n        label\n      }\n    }\n    sharable_link\n  }\n}\n\nmutation SubmitResult($eventId: ID!, $eventResult: [EventResultInput!]!) {\n  submitResult(event_id: $eventId, event_result: $eventResult) {\n    event_id\n    is_passed\n    is_qr_code_scanned\n    qr_code_number\n    createdAt\n  }\n}\n\nquery GetEvent($getEventId: ID!) {\n  getEvent(id: $getEventId) {\n    id\n    name\n    sharable_link\n    start_time\n    location\n    guide_lines {\n      body\n      correct_answer\n      id\n      mcq_question_list {\n        label\n        value\n      }\n      seq_id\n      title\n      type\n    }\n    date\n    user {\n      email\n      first_name\n      id\n      last_name\n      organization\n    }\n  }\n}\n\nmutation UpdateEvent($updateEventId: ID!, $event: EventUpdate!) {\n  updateEvent(id: $updateEventId, event: $event) {\n    message\n    status\n  }\n}'];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> =
  TDocumentNode extends DocumentNode<infer TType, any> ? TType : never;
